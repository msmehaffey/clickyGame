{"version":3,"sources":["componenets/Image/index.js","componenets/Title/index.js","componenets/Instruction/index.js","componenets/Score/index.js","componenets/Navbar/index.js","componenets/Jumbo/index.js","componenets/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","react_default","a","createElement","src","sourceURL","alt","alternateWords","id","style","height","width","margin","border","onClick","Title","Instruction","instruction","Score","current","high","Navbar","class","componenets_Title","componenets_Instruction","componenets_Score","Jumbo","Footer","className","App","state","pictures","_this","shuffle","images","score","highscore","guessed","pictureClick","filter","num","length","setState","concat","Object","toConsumableArray","console","log","array","sort","Math","random","_this2","this","componenets_Navbar","componenets_Jumbo","textAlign","paddingBottom","marginBottom","map","image","componenets_Image","name","componenets_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8oDAsBeA,MArBf,SAAeC,GACd,OACCC,EAAAC,EAAAC,cAAA,OACCC,IAAKJ,EAAMK,UACXC,IAAKN,EAAMO,eACXC,GAAIR,EAAMQ,GACVC,MACC,CACCC,OAAQ,IACRC,MAAO,IACPC,OAAQ,GACRC,OAAQ,wBAIVC,QAAS,kBAAMd,EAAMc,QAAQd,EAAMQ,QCTvBO,MANf,SAAef,GACd,OACWC,EAAAC,EAAAC,cAAA,MAAIK,GAAG,SAAQP,EAAAC,EAAAC,cAAA,kCCIZa,MANf,SAAqBhB,GACpB,OACWC,EAAAC,EAAAC,cAAA,MAAIK,GAAG,eAAcP,EAAAC,EAAAC,cAAA,UAAKH,EAAMiB,eCI7BC,MANf,SAAelB,GACd,OACWC,EAAAC,EAAAC,cAAA,MAAIK,GAAG,SAAQP,EAAAC,EAAAC,cAAA,oBAAYH,EAAMmB,QAAlB,iBAAyCnB,EAAMoB,QCuB3DC,MArBf,SAAgBrB,GACf,OACOC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAImB,MAAM,yBAAyBd,GAAG,iBAElCP,EAAAC,EAAAC,cAAA,MAAImB,MAAM,YACNrB,EAAAC,EAAAC,cAACoB,EAAD,OAGJtB,EAAAC,EAAAC,cAAA,MAAImB,MAAM,YACNrB,EAAAC,EAAAC,cAACqB,EAAD,CAAaP,YAAajB,EAAMiB,eAGpChB,EAAAC,EAAAC,cAAA,MAAImB,MAAM,YACNrB,EAAAC,EAAAC,cAACsB,EAAD,CAAON,QAASnB,EAAMmB,QAASC,KAAMpB,EAAMoB,WCF5CM,MAZf,SAAe1B,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKmB,MAAM,4BAA4Bd,GAAG,kBAC1CP,EAAAC,EAAAC,cAAA,OAAKmB,MAAM,aACXrB,EAAAC,EAAAC,cAAA,UAAMH,EAAMiB,YAAZ,KACAhB,EAAAC,EAAAC,cAAA,MAAImB,MAAM,aAAV,uBACArB,EAAAC,EAAAC,cAAA,KAAGmB,MAAM,QAAT,+ECCSK,MAVf,WACC,OACW1B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,YAAYpB,GAAG,eAC1BP,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,aACX3B,EAAAC,EAAAC,cAAA,6CCkEL0B,6MA9DbC,MAAQ,CACNC,SAAUC,EAAKC,QAAQC,GACvBC,MAAO,EACPC,UAAW,EACXC,QAAS,GACTpB,YAAa,oBAYfqB,aAAe,SAAC9B,GACFwB,EAAKF,MAAMO,QAAQE,OAAO,SAAAC,GAAG,OAAIA,IAAQhC,IAC5CiC,OAAS,EAChBT,EAAKU,SAAS,CACZL,QAAS,GACTN,SAAUC,EAAKC,QAAQC,GACvBC,MAAO,EACPlB,YAAa,6BAGjBe,EAAKU,SAAS,CACZL,QAAO,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAMZ,EAAKF,MAAMO,SAAjB,CAA0B7B,IACjCuB,SAAUC,EAAKC,QAAQC,GACvBC,MAAOH,EAAKF,MAAMK,MAAQ,EAC1BC,UAAYJ,EAAKF,MAAMK,MAAQ,EAAIH,EAAKF,MAAMM,UAAYJ,EAAKF,MAAMK,MAAQ,EAAIH,EAAKF,MAAMM,UAC5FnB,YAAa,0BAEf6B,QAAQC,IAAIf,EAAKF,MAAMO,kFA1BjBW,GAEJ,OADAA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,KAC1BH,mCA8BF,IAAAI,EAAAC,KACP,OACEpD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAQnC,QAASkC,KAAKvB,MAAMK,MAAOf,KAAMiC,KAAKvB,MAAMM,UAAWnB,YAAaoC,KAAKvB,MAAMb,cACvFhB,EAAAC,EAAAC,cAACoD,EAAD,CAAOtC,YAAaoC,KAAKvB,MAAMb,cAC7BhB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,YAAYnB,MAAO,CAAC+C,UAAW,SAAUC,cAAe,GAAIC,aAAc,KACtFL,KAAKvB,MAAMC,SAAS4B,IACnB,SAACC,GAAD,OAAW3D,EAAAC,EAAAC,cAAC0D,EAAD,CACOrD,GAAIoD,EAAMpD,GACVH,UAAWuD,EAAMA,MACjBrD,eAAgBqD,EAAME,KAEtBhD,QAASsC,EAAKd,kBAItCrC,EAAAC,EAAAC,cAAC4D,EAAD,cA1DYC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e034531f.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Image(props) {\r\n\treturn (\r\n\t\t<img \r\n\t\t\tsrc={props.sourceURL} \r\n\t\t\talt={props.alternateWords} \r\n\t\t\tid={props.id} \r\n\t\t\tstyle={\r\n\t\t\t\t{\r\n\t\t\t\t\theight: 175, \r\n\t\t\t\t\twidth: 225, \r\n\t\t\t\t\tmargin: 10, \r\n\t\t\t\t\tborder: \"5px solid dodgerblue\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// onMouseOver={() => props.handleHover(props.id)}\r\n\t\t\tonClick={() => props.onClick(props.id)}\r\n\t\t\t>\r\n\t\t</img> \r\n\t)\r\n}\r\n\r\nexport default Image;","import React from 'react'\r\nfunction Title(props) {\r\n\treturn (\r\n            <li id=\"title\"><h4>Dodger Memory Game</h4></li>\r\n\t)\r\n}\r\n\r\nexport default Title;","import React from 'react'\r\nfunction Instruction(props) {\r\n\treturn (\r\n            <li id=\"instruction\"><h2>{props.instruction}</h2></li>\r\n\t)\r\n}\r\n\r\nexport default Instruction;","import React from 'react'\r\nfunction Score(props) {\r\n\treturn (\r\n            <li id=\"score\"><h4>Score: {props.current} | Highscore: {props.high}</h4></li>\r\n\t)\r\n}\r\n\r\nexport default Score;","import React from 'react'\r\nimport Title from '../Title'\r\nimport Instruction from '../Instruction'\r\nimport Score from '../Score'\r\n\r\nfunction Navbar(props) {\r\n\treturn (\r\n        <div>\r\n        <ul class=\"nav nav-pills nav-fill\" id=\"navigationBar\"> \r\n\r\n            <li class=\"nav-item\"> \r\n                <Title/>\r\n            </li> \r\n\r\n            <li class=\"nav-item\"> \r\n                <Instruction instruction={props.instruction}/>\r\n            </li> \r\n\r\n            <li class=\"nav-item\"> \r\n                <Score current={props.current} high={props.high}/>\r\n            </li> \r\n        </ul>\r\n        </div>\r\n\t)\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nfunction Jumbo(props) {\r\n    return (\r\n      <div class=\"jumbotron jumbotron-fluid\" id=\"jumbotronStyle\"> \r\n      <div class=\"container\"> \r\n      <h2 >{props.instruction} </h2>\r\n      <h1 class=\"display-3\">Dodger Memory Game!</h1> \r\n      <p class=\"lead\">Click all the Dodgers but be careful not to click the same player twice!</p> \r\n      </div> \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Jumbo;","import React from 'react'\r\n\r\nfunction Footer() {\r\n\treturn (\r\n            <div className=\"col-lg-12\" id=\"footerStyle\">\r\n                <div className=\"container\">\r\n                    <p> Portfolio: Shuler.dev</p>\r\n                </div>\r\n            </div>\r\n\t)\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Image from './componenets/Image'\nimport Navbar from './componenets/Navbar'\nimport Jumbo from './componenets/Jumbo'\nimport Footer from './componenets/Footer'\nimport images from './images.json'\n\n\nclass App extends Component {\n\n  state = {\n    pictures: this.shuffle(images),\n    score: 0,\n    highscore: 0,\n    guessed: [],\n    instruction: \"Click to Begin\"\n  }\n\n  shuffle(array) {\n      array.sort(() => Math.random() - 0.5)\n      return array\n  }\n\n  // pictureHover = (id) => {\n  //   console.log(this.state.guessed)\n  // }\n\n  pictureClick = (id) => {\n    let check = this.state.guessed.filter(num => num === id)\n    if(check.length > 0) {\n      this.setState({\n        guessed: [],\n        pictures: this.shuffle(images),\n        score: 0,\n        instruction: \"You Guessed Incorrectly\"\n      })\n    } else {\n    this.setState({\n      guessed: [...this.state.guessed, id],\n      pictures: this.shuffle(images),\n      score: this.state.score + 1,\n      highscore: (this.state.score + 1 > this.state.highscore ? this.state.score + 1 : this.state.highscore),\n      instruction: \"You Guessed Correctly\"\n    })\n    console.log(this.state.guessed)\n  }\n\n  }\n\n\n  render() {\n    return (\n      <div>\n      <Navbar current={this.state.score} high={this.state.highscore} instruction={this.state.instruction}/>\n      <Jumbo instruction={this.state.instruction}/>\n        <div className=\"container\" style={{textAlign: \"center\", paddingBottom: 40, marginBottom: 40}}>\n          {this.state.pictures.map(\n            (image) => <Image\n                              id={image.id}\n                              sourceURL={image.image}\n                              alternateWords={image.name}\n                              // handleHover={this.pictureHover}\n                              onClick={this.pictureClick}\n                              />\n          )}\n        </div>\n      <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}